package com.oresomecraft.BattleMaps.classes;

import java.util.ArrayList;

import com.oresomecraft.BattleMaps.IBattleMap;
import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockBreakEvent;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.world.WorldLoadEvent;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;

import com.oresomecraft.BattleMaps.BattleMap;
import com.oresomecraft.BattleMaps.OresomeBattlesMaps;
import com.oresomecraft.OresomeBattles.Gamemode;
import com.oresomecraft.OresomeBattles.events.ClearSpawnsEvent;
import com.oresomecraft.OresomeBattles.events.InventoryEvent;
import com.oresomecraft.OresomeBattles.events.ReadyMapsEvent;

public class Template extends BattleMap implements IBattleMap, Listener {

//When submitting a map, remember to remove all comments like this one! Copy this template with CTRL+C and paste it into a new file with CTRL+V! You can create a new file by going to src/com/oresomecraft/BattleMaps/classes/[+]!

    OresomeBattlesMaps plugin;
  
	// HAPPY BIRTHDAY R3creat3!!!!!!!!!!!!!!!!!!!!!!
	// HAPPY BIRTHDAY R3creat3!!!!!!!!!!!!!!!!!!!!!!
	// HAPPY BIRTHDAY R3creat3!!!!!!!!!!!!!!!!!!!!!!
	// HAPPY BIRTHDAY R3creat3!!!!!!!!!!!!!!!!!!!!!!
	// HAPPY BIRTHDAY R3creat3!!!!!!!!!!!!!!!!!!!!!!
	// HAPPY BIRTHDAY R3creat3!!!!!!!!!!!!!!!!!!!!!!
	// HAPPY BIRTHDAY R3creat3!!!!!!!!!!!!!!!!!!!!!!
	// HAPPY BIRTHDAY R3creat3!!!!!!!!!!!!!!!!!!!!!!
	// HAPPY BIRTHDAY R3creat3!!!!!!!!!!!!!!!!!!!!!!
	// HAPPY BIRTHDAY R3creat3!!!!!!!!!!!!!!!!!!!!!!
	// HAPPY BIRTHDAY R3creat3!!!!!!!!!!!!!!!!!!!!!!
	// HAPPY BIRTHDAY R3creat3!!!!!!!!!!!!!!!!!!!!!!
	// HAPPY BIRTHDAY R3creat3!!!!!!!!!!!!!!!!!!!!!!
	// HAPPY BIRTHDAY R3creat3!!!!!!!!!!!!!!!!!!!!!!
	// HAPPY BIRTHDAY R3creat3!!!!!!!!!!!!!!!!!!!!!!
	// HAPPY BIRTHDAY R3creat3!!!!!!!!!!!!!!!!!!!!!!
	// HAPPY BIRTHDAY R3creat3!!!!!!!!!!!!!!!!!!!!!!
	// HAPPY BIRTHDAY R3creat3!!!!!!!!!!!!!!!!!!!!!!
	// HAPPY BIRTHDAY R3creat3!!!!!!!!!!!!!!!!!!!!!!
	// HAPPY BIRTHDAY R3creat3!!!!!!!!!!!!!!!!!!!!!!
	// HAPPY BIRTHDAY R3creat3!!!!!!!!!!!!!!!!!!!!!!
	// HAPPY BIRTHDAY R3creat3!!!!!!!!!!!!!!!!!!!!!!
	// HAPPY BIRTHDAY R3creat3!!!!!!!!!!!!!!!!!!!!!!
	// HAPPY BIRTHDAY R3creat3!!!!!!!!!!!!!!!!!!!!!!
	// HAPPY BIRTHDAY R3creat3!!!!!!!!!!!!!!!!!!!!!!
	// HAPPY BIRTHDAY R3creat3!!!!!!!!!!!!!!!!!!!!!!
	// HAPPY BIRTHDAY R3creat3!!!!!!!!!!!!!!!!!!!!!!
	// HAPPY BIRTHDAY R3creat3!!!!!!!!!!!!!!!!!!!!!!
	
	

    //Change this with the 'public class Template'
    //In example if the class name was Derp, do public Derp!
    public Template(OresomeBattlesMaps pl) {
        super(pl);
        plugin = pl;
    }

    // Spawn array lists. (Don't change these!)
    public ArrayList<Location> redSpawns = new ArrayList<Location>();
    public ArrayList<Location> blueSpawns = new ArrayList<Location>();
    public ArrayList<Location> FFASpawns = new ArrayList<Location>();

    // Map details
    String name = "Birthday";
    //Shortened name for various uses
    String fullName = "Happy Birthday R3creat3!";
    //Full name used for the broadcast and more various uses
    String creators = "_Moist, Sky_Aurora, niceman506 and the community!";
    //The creators of the map, remember, it is CaSeSeNsItIvE!
    Gamemode[] modes = {Gamemode.TDM, Gamemode.INFECTION};
    //Map download link: <put a DIRECT map download here!>

    @EventHandler(priority = EventPriority.NORMAL)
    public void readyMap(ReadyMapsEvent event) { // Internal - Do not change
        addMap(name);
        addCreators(name, creators);
        setFullName(name, fullName);
        setGamemodes(name, modes);
    }

    @EventHandler
    public void setSpawns(WorldLoadEvent event) { // Internal - Do not change
        if (event.getWorld().getName().equals(name)) {
            readyTDMSpawns();
            readyFFASpawns();
        }
    }

    public void readyTDMSpawns() {
        World w = Bukkit.getServer().getWorld(name);

        Location redSpawn = new Location(w, 0, 99, 27, 2, 0);
        Location blueSpawn = new Location(w, -9, 110, -20, 0, 0);

        redSpawns.add(redSpawn);
        redSpawns.add(new Location(w, -59, 85, -20, 2, 0));
        redSpawns.add(new Location(w, -33, 79, -44, 1, 0));
        redSpawns.add(new Location(w, -34, 79, -14, 1, 0));
        redSpawns.add(new Location(w, -44, 77, -8, 1, 0));
        redSpawns.add(new Location(w, -77, 80, -1, 2, 0));
        redSpawns.add(new Location(w, -75, 77, -44, 0, 0));
        redSpawns.add(new Location(w, -53, 79, -45, 0, 0));
        redSpawns.add(new Location(w, -40, 70, -20, 1, 0));
        redSpawns.add(new Location(w, -97, 68, -8, 2, 0));
        redSpawns.add(new Location(w, -60, 67, -34, 0, 0));

        blueSpawns.add(blueSpawn);
        blueSpawns.add(new Location(w, -59, 85, -20, 2, 0));
        blueSpawns.add(new Location(w, -33, 79, -44, 1, 0));
        blueSpawns.add(new Location(w, -34, 79, -14, 1, 0));
        blueSpawns.add(new Location(w, -44, 77, -8, 1, 0));
        blueSpawns.add(new Location(w, -77, 80, -1, 2, 0));
        blueSpawns.add(new Location(w, -75, 77, -44, 0, 0));
        blueSpawns.add(new Location(w, -53, 79, -45, 0, 0));
        blueSpawns.add(new Location(w, -40, 70, -20, 1, 0));
        blueSpawns.add(new Location(w, -97, 68, -8, 2, 0));
        blueSpawns.add(new Location(w, -60, 67, -34, 0, 0));

        setRedSpawns(name, redSpawns);
        setBlueSpawns(name, blueSpawns);
    }

    public void readyFFASpawns() {

        World w = Bukkit.getServer().getWorld(name);

        Location redSpawn = new Location(w, 0, 99, 27, 2, 0);
        Location blueSpawn = new Location(w, -9, 110, -20, 0, 0);

        FFASpawns.add(redSpawn);
        FFASpawns.add(blueSpawn);
        FFASpawns.add(new Location(w, -59, 85, -20, 2, 0));
        FFASpawns.add(new Location(w, -33, 79, -44, 1, 0));
        FFASpawns.add(new Location(w, -34, 79, -14, 1, 0));
        FFASpawns.add(new Location(w, -44, 77, -8, 1, 0));
        FFASpawns.add(new Location(w, -77, 80, -1, 2, 0));
        FFASpawns.add(new Location(w, -75, 77, -44, 0, 0));
        FFASpawns.add(new Location(w, -53, 79, -45, 0, 0));
        FFASpawns.add(new Location(w, -40, 70, -20, 1, 0));
        FFASpawns.add(new Location(w, -97, 68, -8, 2, 0));
        FFASpawns.add(new Location(w, -60, 67, -34, 0, 0));

        setFFASpawns(name, FFASpawns);
    }

    @EventHandler(priority = EventPriority.NORMAL)
    public void applyInventory(InventoryEvent event) {

        String par = event.getMessage();
        Player p = event.getPlayer();
        Inventory i = p.getInventory();
        if (par.equalsIgnoreCase(name)) {
            clearInv(p);

            ItemStack COOKIE = new ItemStack(Material.COOKIE, 1000);
            ItemStack CAKE = new ItemStack(Material.CAKE, 1);
            ItemStack BOW = new ItemStack(Material.BOW, 1);
            ItemStack ARROWS = new ItemStack(Material.ARROW, 1);
            ItemStack SLIMEBALL = new ItemStack(Material.SLIMEBALL, 1);
			ItemStack EGGS = new ItemStack(Material.EGG, 16)


            i.setItem(0, SLIMEBALL);
            i.setItem(1, BOW);
            i.setItem(2, CAKE);
            i.setItem(3, COOKIE);
            i.setItem(27, ARROW);
            i.setItem(8, EGG);

        }
    }

    @EventHandler(priority = EventPriority.NORMAL)
    public void clearSpawns(ClearSpawnsEvent event) {
        redSpawns.clear();
        blueSpawns.clear();
        FFASpawns.clear();
    }

    // Region. (Top corner block and bottom corner block.
    // Top left corner.
    public int x1 = -100;
    public int y1 = 160;
    public int z1 = -70;

    //Bottom right corner.
    public int x2 = -70;
    public int y2 = 30;
    public int z2 = 50;

    // Getting the region
    public boolean contains(Location loc, int x1, int x2, int y1,
                            int y2, int z1, int z2) {
        int bottomCornerX = x1 < x2 ? x1 : x2;
        int bottomCornerZ = z1 < z2 ? z1 : z2;
        int topCornerX = x1 > x2 ? x1 : x2;
        int topCornerZ = z1 > z2 ? z1 : z2;
        int bottomCornerY = y1 < y2 ? y1 : y2;
        int topCornerY = y1 > y2 ? y1 : y2;
        if (loc.getX() >= bottomCornerX && loc.getX() <= topCornerX) {
            if (loc.getZ() >= bottomCornerZ && loc.getZ() <= topCornerZ) {
                if (loc.getY() >= bottomCornerY && loc.getY() <= topCornerY) {
                    return true;
                }
            }
        }
        return false;

    }

    // Code to prevent block breaking.
    @EventHandler(priority = EventPriority.NORMAL)
    public void protection(BlockBreakEvent event) {

        Block b = event.getBlock();
        Location loc = b.getLocation();

        if (loc.getWorld().getName().equals(name)) {

            event.setCancelled(true);
        }

    }

    // Code to prevent block placing.
    @EventHandler(priority = EventPriority.NORMAL)
    public void protection1(BlockPlaceEvent event) {

        Block b = event.getBlock();
        Location loc = b.getLocation();

        if (loc.getWorld().getName().equals(name)) {

            event.setCancelled(true);

        }

    }

}
